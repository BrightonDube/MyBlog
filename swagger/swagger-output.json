{
  "openapi": "3.0.0",
  "info": {
    "title": "Node.js API with Express & MongoDB",
    "version": "1.0.0"
  },
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid"
      }
    },
    "schemas": {
      "Post": {
        "type": "object",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "My First Post"
          },
          "content": {
            "type": "string",
            "example": "This is the content of my first blog post."
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "605c5d5e3f1f1b23dc7e4b8a"
          },
          "googleId": {
            "type": "string",
            "example": "1234567890",
            "description": "Google ID (if Google OAuth is used)"
          },
          "displayName": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "User creation timestamp"
          },
          "profilePicture": {
            "type": "string",
            "example": "URL_to_profile_picture",
            "description": "URL to user's profile picture"
          },
          "bio": {
            "type": "string",
            "example": "A short biography about the user."
          },
          "location": {
            "type": "string",
            "example": "New York, USA"
          },
          "website": {
            "type": "string",
            "example": "https://www.example.com"
          }
        }
      },
      "NewUserPayload": {
        "type": "object",
        "required": [
          "email",
          "password",
          "displayName"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "newuser@example.com"
          },
          "password": {
            "type": "string",
            "example": "securePassword123"
          },
          "displayName": {
            "type": "string",
            "example": "New User Display Name"
          },
          "profilePicture": {
            "type": "string",
            "example": "URL_to_profile_picture",
            "description": "URL to user's profile picture (optional)"
          },
          "bio": {
            "type": "string",
            "example": "A short biography about the user. (optional)"
          },
          "location": {
            "type": "string",
            "example": "New York, USA (optional)"
          },
          "website": {
            "type": "string",
            "example": "https://www.example.com (optional)"
          }
        }
      },
      "UpdateUserPayload": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "updateduser@example.com"
          },
          "displayName": {
            "type": "string",
            "example": "Updated User Display Name"
          },
          "profilePicture": {
            "type": "string",
            "example": "URL_to_new_profile_picture",
            "description": "URL to user's profile picture (optional)"
          },
          "bio": {
            "type": "string",
            "example": "Updated biography. (optional)"
          },
          "location": {
            "type": "string",
            "example": "London, UK (optional)"
          },
          "website": {
            "type": "string",
            "example": "https://updated-website.com (optional)"
          }
        }
      },
      "ValidationErrorResponse": {  // New schema for validation errors
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Validation error"
          },
          "errors": {
            "type": "object",
            "additionalProperties": { // Allows for dynamic error fields based on validation failures
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Path `title` is required."
                },
                "kind": {
                  "type": "string",
                  "example": "required"
                },
                "path": {
                  "type": "string",
                  "example": "title"
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "example": null
                }
              }
            }
          }
        },
        "example": {  // Example of a ValidationErrorResponse
          "message": "Validation error",
          "errors": {
            "title": {
              "message": "Path `title` is required.",
              "kind": "required",
              "path": "title",
              "value": null
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "cookieAuth": []
    }
  ],
  "paths": {
    "/auth/google": {
      "get": {
        "summary": "Google OAuth login",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/google/callback": {
      "get": {
        "summary": "Google OAuth callback",
        "tags": [
          "Auth"
        ]
      }
    },
    "/post": {
      "get": {
        "summary": "Get all posts",
        "tags": [
          "Post"
        ],
        "responses": {
          "200": {
            "description": "A list of posts"
          }
        }
      },
      "post": {
        "summary": "Create a new post",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post created successfully"
          },
          "400": { // Added 400 response for validation errors
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse" // Reference ValidationErrorResponse schema
                },
                "example": { // Example of a validation error response in Swagger UI
                  "message": "Validation error",
                  "errors": {
                    "title": {
                      "message": "Path `title` is required.",
                      "kind": "required",
                      "path": "title",
                      "value": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/post/{id}": {
      "put": {
        "summary": "Update a post",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Post ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post updated successfully"
          }
        }
      },
      "delete": {
        "summary": "Delete a post",
        "tags": [
          "Post"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Post ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted successfully"
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "Get all users",
        "tags": [
          "User"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "summary": "Get a user by ID",
        "tags": [
          "User"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "summary": "Update a user by ID",
        "tags": [
          "User"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "tags": [
          "User"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication related operations"
    },
    {
      "name": "Post",
      "description": "Operations related to blog posts"
    },
    {
      "name": "User",
      "description": "User management"
    }
  ]
}